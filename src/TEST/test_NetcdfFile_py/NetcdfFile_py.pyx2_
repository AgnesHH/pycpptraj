# distutils: language = c++
from libcpp.string cimport string
from ReplicaDimArray cimport *

cdef enum NCTYPE: NC_UNKNOWN = 0, NC_AMBERTRAJ, NC_AMBERRESTART

cdef extern from "NetcdfFile.h":
    cdef cppclass NetcdfFile:
        #enum NCTYPE "NetcdfFile::NCTYPE": 
        #    NC_UNKNOWN = 0
        #    NC_AMBERTRAJ
        #    NC_AMBERRESTART
        NetcdfFile()
        NetcdfDebug()
        string GetAttrText(char *)
        NCTYPE GetNetcdfConventions()
        int NC_openRead(string &)
        int NC_openWrite(string &)
        int NC_createReservoir(bint, double, int, int&, int&)
        int NC_create(string&, NCTYPE, int, bint, bint, bint, bint, bint,
                      bint, ReplicaDimArray&, string&)
        void NC_close()

        int SetupFrame()
        int SetupCoordsVelo(bint)
        int SetupTime()
        int SetupBox(double*, NCTYPE)
        int SetupTemperature()
        int SetupMultiD(ReplicaDimArray&)

        void FloatToDouble(double*, float*)
        void DoubleToFloat(float*, double*)

        int Ncid()
        int Ncatom()
        int Ncatom3()
        int Ncframe()
        bint HasVelocities()
        bint HasCoords()

        #protected
        size_t start_[3]
        size_t count_[3]

        int ncid_
        int ncframe_
        int TempVID_
        int coordVID_
        int velocityVID_
        int frcVID_
        int cellAngleVID_
        int cellLengthVID_
        int timeVID_

        #MultiD REMD
        int remd_dimension_
        int indicesVID_
        bint checkNCerr(int)

# distutils: language = c++
import numpy as np
cimport numpy as np

cdef class NetcdfFile_py:
    cdef NetcdfFile * thisptr

    def __cinit__(self):
        self.thisptr = new NetcdfFile()

    def __dealloc__(self):
        del self.thisptr

    def NetcdfDebug(self):
        self.thisptr.NetcdfDebug()

    def GetAttrText(self, mystring):
        return self.thisptr.GetAttrText(mystring) 

    def NC_openRead(self, mystring):
        self.thisptr.NC_openRead(mystring)

    def NC_openWrite(self, mystring):
        return self.thisptr.NC_openWrite(mystring)

    #add NC_createReservoir
    #add NC_create
    
    def NC_close(self):
        self.thisptr.NC_close()

    def SetupFrame(self):
        return self.thisptr.SetupFrame()

    #def SetupCoordsVelo(self,)
    def SetupTime(self):
        return self.thisptr.SetupTime()

    #def SetupBox(self):

    def SetupTemperature(self):
        return self.thisptr.SetupTemperature()

    cdef SetupMultiD(self, ReplicaDimArray & reparray):
        return self.thisptr.SetupMultiD(reparray)

    #do I need to use this function while numpy has it?
    #def FloatToDouble(self, npdoubledim1 * adouble, npfloatdim1 * afloat):
    #def FloatToDouble(self, npdoubledim1  adouble, npfloatdim1  afloat):
    #def FloatToDouble(self, np.ndarray[np.float64_t, ndim=1] adouble, 
    #                        np.ndarray[np.float32_t] afloat):
    #    #self.thisptr.FloatToDouble(<double *>adouble.data, <float *> afloat.data)
    #    self.thisptr.FloatToDouble(&adouble[0], &afloat[0])

    ##def DoubleToFloat(self, npfloatdim1 afloat, npdoubledim1 adouble):
    #def DoubleToFloat(self, np.ndarray[np.float32_t, ndim=1] afloat, 
    #                        np.ndarray[np.float64_t, ndim=1] adouble):
    #    #self.thisptr.DoubleToFloat(<float *> afloat.data, <double *> adouble.data)
    #    self.thisptr.DoubleToFloat(&afloat[0], &adouble[0])
        
    def Ncid(self):
        return self.thisptr.Ncid()

    def Ncatom(self):
        return self.thisptr.Ncatom()

    def Ncatom3(self):
        return self.thisptr.Ncatom3()

    def Ncframe(self):
        return self.thisptr.Ncframe()

    def HasVelocities(self):
        return self.thisptr.HasVelocities()

    def HasCoords(self):
        return self.thisptr.HasCoords()
